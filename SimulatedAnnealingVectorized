# modified step size to 2000

import numpy as np
import random
import matplotlib.pyplot as plt

def neighbor(p, vec):
	print "vector is",vec
	p[0] = (p[0] + range_e*vec[0]/stepSize)%range_e
	p[1] = (p[1] + range_a*vec[1]/stepSize)%range_a
	p[2] = (p[2] + range_dropout*vec[2]/stepSize)%range_dropout
	return p

def jump(p, Temperature):
	p[0] = (p[0] + (range_e * random.random() * 2 - range_e) * Temperature*1.0/T0)%range_e
	p[1] = (p[1] + (range_a * random.random() * 2 - range_a) * Temperature*1.0/T0)%range_a
	p[2] = (p[2] + (range_dropout * random.random() * 2 - range_dropout)* Temperature*1.0/T0)%range_dropout
	return p

def SA(init, initAccuracy, new, newAccuracy, minval, minloc, Temperature, stage_1, stage_2, nodes):
	for i in range(nodes):
		accuracyList[i][stage_1*DecreaseTemp + stage_2+1] = newAccuracy[i]
		print "Stage ", stage_1, stage_2, "nodes ", i, " with accuracy", newAccuracy[i]
		if newAccuracy[i] < minval:
			minval = newAccuracy[i]
			minloc[0] = new[i][0]
			minloc[1] = new[i][1]
			minloc[2] = new[i][2]

	minList.append(minval)

	for i in range(nodes):
		if newAccuracy[i] < initAccuracy[i]:
			new[i] = neighbor(init[i], np.subtract(new[i],init[i]))
		else:
			if random.random() < np.exp(-(newAccuracy[i] - initAccuracy[i])/Temperature):
				new[i] = jump(init[i], Temperature)
			else:
	 			new[i] = neighbor(init[i], np.subtract(new[i],init[i]))

	init = new
	initAccuracy = newAccuracy

	print "minimum value is: ", minval, " now at ", minloc
	print "current locations for each node:"
	print init

	for i in range(nodes):
		try:
			newAccuracy[i]=1-float(raw_input('Accuracy for parallel node %d at (%f, %f, %f) when heat #%d, anneal #%d:'%(i,init[i][0],init[i][1],init[i][2],stage_1, stage_2)))
		except ValueError:
			print "Not a number"

	return minval, minloc, init, initAccuracy, new, newAccuracy
###### Initialization ######
IncreaseTemp = 2
DecreaseTemp = 3

range_e = 7
range_a = 4
range_dropout = 8
T0 = 5000
minloc = [0,0,0]
minval = 100
stepSize = 200
nodes = 9

temperatureList = []
minList = []
accuracyList = np.zeros(shape=(nodes, IncreaseTemp*DecreaseTemp+1))

init = np.zeros(shape = (nodes, 3))
initAccuracy = np.zeros(nodes)
new = np.zeros(shape = (nodes, 3))
newAccuracy = np.zeros(nodes)

for i in range(nodes):
    try:
        init[i][0]=float(raw_input('Input initial parameter for node %d:'%i))
    except ValueError:
        print "Not a number"
    try:
        init[i][1]=float(raw_input('Input initial parameter for node %d:'%i))
    except ValueError:
        print "Not a number"
    try:
    	init[i][2]=float(raw_input('Input initial parameter for node %d:'%i))    
    except ValueError:
        print "Not a number"
    try:
    	initAccuracy[i]=1-float(raw_input('Input corresponding accuracy score for node %d:'%i))
    except ValueError:
        print "Not a number"

for i in range(nodes):
    try:
        new[i][0]=float(raw_input('Input second initial parameter for node %d:'%i))
    except ValueError:
        print "Not a number"
    try:
        new[i][1]=float(raw_input('Input second initial parameter for node %d:'%i))
    except ValueError:
        print "Not a number"
    try:
        new[i][2]=float(raw_input('Input second initial parameter for node %d:'%i))    
    except ValueError:
        print "Not a number"
    try:
        newAccuracy[i]=1-float(raw_input('Input corresponding accuracy score for node %d:'%i))
    except ValueError:
        print "Not a number"

for i in range(nodes):
    accuracyList[i][0] = initAccuracy[i]
    if initAccuracy[i] < minval:
        minval = initAccuracy[i]
        minloc[0] = init[i][0]
        minloc[1] = init[i][1]
        minloc[2] = init[i][2]
minList.append(minval)

minloc = [range_e-1,range_a-1,range_dropout-1]
minval = 1000

temperatureList.append(T0)

for i in range(IncreaseTemp):
	Temperature = T0

	for j in range(DecreaseTemp):
		temperatureList.append(Temperature)
		print initAccuracy[i]-newAccuracy[i]
		minval, minloc, init, initAccuracy, new, newAccuracy= SA(init, initAccuracy, new, newAccuracy, minval, minloc, Temperature,i,j,nodes)
		if Temperature < 800:
			Temperature = Temperature * 0.5
		else:
			Temperature = Temperature * 0.3

	T0 = T0 * 0.67

x = np.arange(0,len(temperatureList),1)
print len(temperatureList)
plt.plot(x,temperatureList,'ro-')
plt.figure()
for i in range(nodes):
	plt.plot(x,accuracyList[i])
plt.plot(x,minList,'ro-')
plt.show()



