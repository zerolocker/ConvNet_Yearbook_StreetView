import numpy as np
import random
import matplotlib.pyplot as plt

count = 1
range_e = 8
range_a = 5
range_dropout = 9
T0 = 5000
minloc = [0,0]
minval = 100
stepSize = 10

temperatureList = []
minList = []
p1List = []
p2List = []
p3List = []

J = np.zeros(shape = (range_e,range_a,range_dropout))
for i in range(range_e):
	for j in range (range_a):
		for k in range (range_dropout):
			J[i][j][k] = count
			count = count + 1

minloc = [0,0,0]
minval = 1000

init_1 = [int(range_e * 0.25), int(range_a * 0.25), int(range_dropout * 0.25)]
init_2 = [int(range_e * 0.5), int(range_a * 0.5), int(range_dropout * 0.5)]
init_3 = [int(range_e * 0.75), int(range_a * 0.75), int(range_dropout * 0.75)]

def neighbor(p1, p2, p3):

	p1[0] = int((p1[0] + range_e/stepSize)%range_e)
	p1[1] = int((p1[1] + range_a/stepSize)%range_a)
	p1[2] = int((p1[2] + range_dropout/stepSize)%range_dropout)

	p2[0] = int((p2[0] + range_e/stepSize)%range_e)
	p2[1] = int((p2[1] + range_a/stepSize)%range_a)
	p2[2] = int((p2[2] + range_dropout/stepSize)%range_dropout)

	p3[0] = int((p3[0] + range_e/stepSize)%range_e)
	p3[1] = int((p3[1] + range_a/stepSize)%range_a)
	p3[2] = int((p3[2] + range_dropout/stepSize)%range_dropout)

	return p1, p2, p3

def jump(p1, p2, p3, Temperature):
	p1[0] = int((p1[0] + (range_e * random.random() * 2 - range_e) * Temperature/T0)%range_e)
	p1[1] = int((p1[1] + (range_a * random.random() * 2 - range_a) * Temperature/T0)%range_a)
	p1[2] = int((p1[2] + (range_dropout * random.random() * 2 - range_dropout)* Temperature/T0)%range_dropout)

	p2[0] = int((p2[0] + (range_e * random.random() * 2 - range_e)* Temperature/T0)%range_e)
	p2[1] = int((p2[1] + (range_a * random.random() * 2 - range_a)* Temperature/T0)%range_a)
	p2[2] = int((p2[2] + (range_dropout * random.random() * 2 - range_dropout)* Temperature/T0)%range_dropout)

	p3[0] = int((p3[0] + (range_e * random.random() * 2 - range_e)* Temperature/T0)%range_e)
	p3[1] = int((p3[1] + (range_a * random.random() * 2 - range_a)* Temperature/T0)%range_a)
	p3[2] = int((p3[2] + (range_dropout * random.random() * 2 - range_dropout)* Temperature/T0)%range_dropout)

	return p1, p2, p3


def SA(init_1, init_2, init_3, minval, minloc, Temperature):
	p1List.append(J[init_1[0]][init_1[1]][init_1[2]])
	p2List.append(J[init_2[0]][init_2[1]][init_2[2]])
	p3List.append(J[init_3[0]][init_3[1]][init_3[2]])	

	if J[init_1[0]][init_1[1]][init_1[2]] < minval:
		minval = J[init_1[0]][init_1[1]][init_1[2]]
		minloc = init_1
	if J[init_2[0]][init_2[1]][init_2[2]] < minval:
		minval = J[init_2[0]][init_2[1]][init_2[2]]
		minloc = init_2
	if J[init_3[0]][init_3[1]][init_3[2]] < minval:
		minval = J[init_3[0]][init_3[1]][init_3[2]]
		minloc = init_3

	minList.append(minval)

	new_1, new_2, new_3 = neighbor(init_1, init_2, init_3)
	jump_1, jump_2, jump_3 = jump(init_1, init_2, init_3, Temperature)

	if J[new_1[0]][new_1[1]][new_1[2]] <= J[init_1[0]][init_1[1]][init_1[2]]:
		init_1 = new_1
	else:
		if random.random() < np.exp(-(J[new_1[0]][new_1[1]][new_1[2]] - J[init_1[0]][init_1[1]][init_1[2]])/Temperature):
			init_1 = jump_1

	if J[new_2[0]][new_2[1]][new_2[2]] <= J[init_2[0]][init_2[1]][init_2[2]]:
		init_2 = new_2
	else:
		if random.random() < np.exp(-(J[new_2[0]][new_2[1]][new_2[2]] - J[init_2[0]][init_2[1]][init_2[2]])/Temperature):
			init_2 = jump_2

	if J[new_3[0]][new_3[1]][new_3[2]] <= J[init_3[0]][init_3[1]][init_3[2]]:
		init_3 = new_3
	else:
		if random.random() < np.exp(-(J[new_3[0]][new_3[1]][new_3[2]] - J[init_3[0]][init_3[1]][init_3[2]])/Temperature):
			init_3 = jump_3

	print minval, "now at", minloc

	return minval, minloc

for i in range(2):
	Temperature = T0

	for j in range(5):
		temperatureList.append(Temperature)
		minval, minloc = SA(init_1,init_2,init_3, minval, minloc, Temperature)
		if Temperature < 800:
			Temperature = Temperature * 0.5
		else:
			Temperature = Temperature * 0.3

	T0 = T0 * 0.67

x = np.arange(0,len(temperatureList),1)
print len(temperatureList)
print len(p1List)
#plt.plot(x,temperatureList,'ro-')
#plt.figure()
plt.plot(x,p1List,'b-')
plt.plot(x,p2List,'g-')
plt.plot(x,p3List,'y-')
plt.plot(x,minList,'r-')
plt.show()



